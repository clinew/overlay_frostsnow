From 4f9698b8caa2bce5b428d10b74e3c03accd5e873 Mon Sep 17 00:00:00 2001
From: Wade Cline <wadecline@hotmail.com>
Date: Fri, 2 Mar 2018 22:44:32 -0800
Subject: [PATCH 6/8] m_ssl_openssl Add strong peer cert validation.

Allow the user to configure a whitelist of key types and minimum key
size pairs for the client certificate chain.  Also allow a whitelist of
signature algorithms for the client certificate chain.
---
 docs/conf/modules/openssl.conf.example |  21 ++++
 src/modules/extra/m_ssl_openssl.cpp    | 133 +++++++++++++++++++++++++
 2 files changed, 154 insertions(+)
 create mode 100644 docs/conf/modules/openssl.conf.example

diff --git a/docs/conf/modules/openssl.conf.example b/docs/conf/modules/openssl.conf.example
new file mode 100644
index 000000000..37bff3159
--- /dev/null
+++ b/docs/conf/modules/openssl.conf.example
@@ -0,0 +1,21 @@
+#-#-#-#-#-#-#-#-#-#-#- OPENSSL CONFIGURATION   -#-#-#-#-#-#-#-#-#-#-#-#
+#                                                                     #
+# Extra configuration options for the OpenSSL module.                 #
+<openssl
+	# Specify a comma-separated whitelist of key type and minimum
+	# key size pairs for all certificates in the client
+	# certificate chain; the key type and key size are separated
+	# via a single colon (ex: type1:size1,type2:size2,...) Key
+	# types are defined by the OpenSSL library and can be found
+	# in <openssl/obj_macs.h> as either SN (Short Name) or LN
+	# (Long Name) entries in that file.  Note that these entries
+	# may not quite be what you expect (for example, RSA public
+	# keys are named 'rsaEncryption' and not simply 'rsa').
+	#peer_keysize_min="rsaEncryption:4096"
+
+	# Specify a comma-separated whitelist of valid certificate
+	# signature algorithms for the client certificate chain.  The
+	# names of available signature algorithms can be found in
+	# <openssl/obj_macs.h>.
+	#peer_sigalg="RSA-SHA512"
+>
diff --git a/src/modules/extra/m_ssl_openssl.cpp b/src/modules/extra/m_ssl_openssl.cpp
index 432430bb3..f5a630f1c 100644
--- a/src/modules/extra/m_ssl_openssl.cpp
+++ b/src/modules/extra/m_ssl_openssl.cpp
@@ -167,6 +167,13 @@ namespace OpenSSL
 		SSL_CTX* const ctx;
 		long ctx_options;
 
+		/** Whitelist of client certificate chain key types, sizes, and
+		 *  signature algorithms.
+		 */
+		std::vector<int> keytypes;
+		std::vector<int> keysizes;
+		std::vector<int> sigalgs;
+
 	 public:
 		Context(SSL_CTX* context)
 			: ctx(context)
@@ -304,6 +311,57 @@ namespace OpenSSL
 			}
 		}
 
+		void SetCliCertWL(std::string& keymins, std::string& sigalgstrs) {
+			/* Set minimum peer key size */
+			while (!keymins.empty()) {
+				std::string::size_type delim = keymins.find(",");
+				if (delim == std::string::npos) {
+					delim = keymins.size();
+				}
+				std::string keymin = keymins.substr(0, delim);
+				keymins.erase(0, delim + 1);
+				std::string::size_type sep = keymin.find_first_of(":");
+				if (sep == keymin.npos) {
+					throw ModuleException("Expected 'key-type:key-size' in '" + keymin + "'");
+				} else if (sep != keymin.find_last_of(":")) {
+					throw ModuleException("Expected single ':' delimiter in '" + keymin + "'");
+				}
+				std::string key_type_str = keymin.substr(0, sep);
+				std::string key_size_str = keymin.substr(sep + 1);
+				int key_type = OBJ_txt2nid(key_type_str.c_str());
+				if (!key_type) {
+					throw ModuleException("Unknown key type: '" + key_type_str + "'");
+				}
+				int key_size = atoi(key_size_str.c_str());
+				if (key_size <= 0) {
+					throw ModuleException("Key size must be greater than 0 (was '" + key_size_str + "')");
+				}
+				if (std::find(keytypes.begin(), keytypes.end(), key_type) != keytypes.end()) {
+					throw ModuleException("Key type '" + key_type_str + "' specified multiple times");
+				}
+				keytypes.push_back(key_type);
+				keysizes.push_back(key_size);
+			}
+
+			/* Set peer cert signature algorithm */
+			while (!sigalgstrs.empty()) {
+				std::string::size_type delim = sigalgstrs.find_first_of(",");
+				if (delim == std::string::npos) {
+					delim = sigalgstrs.size();
+				}
+				std::string sigalgstr = sigalgstrs.substr(0, delim);
+				sigalgstrs.erase(0, delim + 1);
+				int sigalg_nid = OBJ_txt2nid(sigalgstr.c_str());
+				if (!sigalg_nid) {
+					throw ModuleException("Invalid signature algorithm '" + sigalgstr + "'");
+				}
+				sigalgs.push_back(sigalg_nid);
+			}
+		}
+
+		std::vector<int>& GetKeytypes() { return keytypes; }
+		std::vector<int>& GetKeysizes() { return keysizes; }
+		std::vector<int>& GetSigalgs() { return sigalgs; }
 
 		long GetDefaultContextOptions() const
 		{
@@ -505,11 +563,20 @@ namespace OpenSSL
 			const std::string crlmode = tag->getString("crlmode", "chain", 1);
 			ctx.SetCRL(crlfile, crlpath, crlmode);
 
+			// Load client cert chain property whitelists.
+			std::string keymins  = tag->getString("peer_keysize_min");
+			std::string sigalgstrs = tag->getString("peer_sigalg");
+			ctx.SetCliCertWL(keymins, sigalgstrs);
+
 			clientctx.SetVerifyCert();
 			if (tag->getBool("requestclientcert", true))
 				ctx.SetVerifyCert();
 		}
 
+		std::vector<int>& GetCliKeytypes() { return ctx.GetKeytypes(); }
+		std::vector<int>& GetCliKeysizes() { return ctx.GetKeysizes(); }
+		std::vector<int>& GetCliSigalgs() { return ctx.GetSigalgs(); }
+
 		const std::string& GetName() const { return name; }
 		SSL* CreateServerSession() { return ctx.CreateServerSession(); }
 		SSL* CreateClientSession() { return clientctx.CreateClientSession(); }
@@ -743,6 +810,72 @@ class OpenSSLIOHook : public SSLIOHook
 		{
 			certinfo->error = "Not activated, or expired certificate";
 		}
+
+		VerifyCertificateStrength(cert, certinfo->error);
+	}
+
+	void VerifyCertificateStrength(X509* cert, std::string& error) {
+		OpenSSL::Profile& profile = GetProfile();
+
+		std::vector<int>& keytypes = profile.GetCliKeytypes();
+		std::vector<int>& keysizes = profile.GetCliKeysizes();
+		// Verify key strength.
+		if (!keytypes.empty()) {
+			EVP_PKEY* evp_pkey = X509_get_pubkey(cert);
+			if (!evp_pkey) {
+				error = "Unable to get pubkey from peer cert";
+				return;
+			}
+			int pkey_type = EVP_PKEY_id(evp_pkey);
+			int pkey_size = EVP_PKEY_bits(evp_pkey);
+			unsigned i;
+			for (i = 0; i < keytypes.size(); i++) {
+				if (pkey_type != keytypes[i]) {
+					// Try next key type.
+					continue;
+				} else if (pkey_size < keysizes[i]) {
+					// Key too short.
+					error = "'" + std::string(OBJ_nid2ln(keytypes[i])) + "' key must be >= '" + std::to_string(keysizes[i]) + "' bits, was '" + std::to_string(pkey_size) + "'";
+					EVP_PKEY_free(evp_pkey);
+					return;
+				}
+				break; // Key is okay.
+			}
+			if (i == keytypes.size()) {
+				// Key type not found.
+				std::string expected;
+				for (i = 0; i < keytypes.size(); i++) {
+					expected += std::string(OBJ_nid2ln(keytypes[i])) + ":" + std::to_string(keysizes[i]) + ",";
+				}
+				expected.pop_back();
+				error = "Peer key type '" + std::string(OBJ_nid2ln(EVP_PKEY_id(evp_pkey))) + "' does not match expected peer key type:size pairs '" + expected + "'";
+				EVP_PKEY_free(evp_pkey);
+				return;
+			}
+			EVP_PKEY_free(evp_pkey);
+		}
+
+		// Verify signature algorithm.
+		std::vector<int>& sigalgs = profile.GetCliSigalgs();
+		if (!sigalgs.empty()) {
+			unsigned i;
+			for (i = 0; i < sigalgs.size(); i++) {
+				if (X509_get_signature_nid(cert) == sigalgs[i]) {
+					// Sig alg found.
+					break;
+				}
+			}
+			if (i == sigalgs.size()) {
+				// Sig alg not found.
+				std::string expected;
+				for (i = 0; i < sigalgs.size(); i++) {
+					expected += std::string(OBJ_nid2sn(sigalgs[i])) + ",";
+				}
+				expected.pop_back();
+				error = "Invalid signature algorithm; got '" + std::string(OBJ_nid2sn(X509_get_signature_nid(cert))) + "' expected one of '" + expected + "'";
+				return;
+			}
+		}
 	}
 
 	void VerifyChain()
-- 
2.35.1

